---
loki:
  # Explicit image configuration to fix ErrImagePull - using Docker Hub registry
  image:
    repository: grafana/loki
    tag: "3.3.0"
    pullPolicy: IfNotPresent
  
  limits_config:
    max_query_length: 0
  auth_enabled: false  # Keep simple for development but with basic auth
  basic_auth:
    enabled: true
    existingSecret: kubearchive-loki
  storage:
    type: filesystem
    filesystem:
      chunks_directory: /var/loki/chunks
      rules_directory: /var/loki/rules

  schemaConfig:
    configs:
      - from: 2024-01-01
        store: tsdb
        object_store: filesystem
        schema: v13
        index:
          prefix: index_
          period: 24h

  commonConfig:
    replication_factor: 1

  compactor:
    retention_enabled: true
    delete_request_store: filesystem
  ruler:
    storage:
      type: local
      local:
        directory: /tmp/rules

deploymentMode: SingleBinary

# Gateway configuration to fix DNS resolver
gateway:
  enabled: true
  replicas: 1
  # Explicit gateway image configuration - using Docker Hub registry
  image:
    repository: nginx
    tag: "1.24-alpine"
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  nginxConfig:
    resolver: dns-default.openshift-dns.svc.cluster.local

# Configure ServiceAccount for Loki
serviceAccount:
  create: false  # We create it manually in loki-pre.yaml
  name: loki-sa

# OpenShift-compatible security context
securityContext:
  runAsNonRoot: false  # Allow running as root for loki
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

podSecurityContext:
  runAsNonRoot: false  # Allow running as root for loki
  allowPrivilegeEscalation: false

containerSecurityContext:
  runAsNonRoot: false  # Allow running as root for loki
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

# Disable canary to avoid SCC issues for now
lokiCanary:
  enabled: false

singleBinary:
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  persistence:
    enabled: false  # No persistent storage for development
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 1
    unhealthyPodEvictionPolicy: AlwaysAllow
  extraVolumeMounts:
    - name: loki-storage
      mountPath: /var/loki
  extraVolumes:
    - name: loki-storage
      emptyDir: {}  # Use ephemeral storage

# Configure sidecar for rules
sidecar:
  rules:
    enabled: true
    resources:
      requests:
        cpu: 25m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi

# Zero out replica counts of other deployment modes
backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

ingester:
  replicas: 0
querier:
  replicas: 0
queryFrontend:
  replicas: 0
queryScheduler:
  replicas: 0
distributor:
  replicas: 0
compactor:
  replicas: 0
indexGateway:
  replicas: 0
bloomCompactor:
  replicas: 0
bloomGateway:
  replicas: 0

# Disable memory-intensive caching for development environment  
chunksCache:
  replicas: 0  # Scale to 0 replicas to avoid memory issues

resultsCache:
  enabled: true
  allocatedMemory: 256  # Keep results cache but with minimal memory
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 256Mi
  # Explicit image for results cache - using Docker Hub registry
  image:
    repository: memcached
    tag: "1.6.24-alpine"
    pullPolicy: IfNotPresent

# Configure memcached for results cache
memcached:
  enabled: true
  replicaCount: 1
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 256Mi

memcachedChunks:
  enabled: false  # Disabled for development

memcachedResults:
  enabled: true
  replicaCount: 1
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 256Mi
  pdb:
    create: true
    maxUnavailable: 1
    unhealthyPodEvictionPolicy: AlwaysAllow

memcachedFrontend:
  enabled: false  # Not needed for development

memcachedIndexQueries:
  enabled: false  # Not needed for development

# Disable test pods for cleaner development environment  
test:
  enabled: false
